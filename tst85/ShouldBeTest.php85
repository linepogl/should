<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests;

use DateTime;
use PHPUnit\Framework\ExpectationFailedException;
use PHPUnit\Framework\TestCase;

use function Should\shouldBe;
use function Should\shouldNotThrow;
use function Should\shouldStartWith;
use function Should\shouldThrow;

class ShouldBeTest extends TestCase
{
    public function test_should_be(): void
    {
        shouldNotThrow()(fn () => shouldBe(1)(1));
        shouldNotThrow()(fn () => shouldBe(TestEnum::A)(TestEnum::A));
        shouldNotThrow()(fn () => shouldBe(null)(null));
        shouldNotThrow()(fn () => shouldBe([1, 2, 3])([1, 2, 3]));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe([1, 2, 3])([1, '2', 3]));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe(1)(2));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe(1, 'Problem!')(2));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe(1)('1'));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe('a')(TestEnum::A));
        shouldThrow(ExpectationFailedException::class)(fn () => shouldBe(null)(''));
    }

    public function test_describe(): void
    {
        shouldBe('is null')(shouldBe(null)->toString());
        shouldBe('is 1')(shouldBe(1)->toString());
        shouldStartWith('is equal to some DateTime')(shouldBe(new DateTime())->toString());
        shouldStartWith('is equal to some Tests\TestEnum')(shouldBe(TestEnum::A)->toString());
    }

    public function test_evaluate(): void
    {
        shouldBe(true)(shouldBe(1)->evaluate(1, returnResult: true));
        shouldBe(false)(shouldBe(1)->evaluate(2, returnResult: true));
    }
}
