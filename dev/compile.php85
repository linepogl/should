<?php

declare(strict_types=1);

use function ImpartialPipes\p_filter;
use function ImpartialPipes\p_filter_out;
use function ImpartialPipes\p_foreach;
use function ImpartialPipes\p_implode;
use function ImpartialPipes\p_map;

require __DIR__.'/../vendor/autoload.php';

new RecursiveIteratorIterator(new RecursiveDirectoryIterator(__DIR__.'/../tst'))
    |> p_filter(static fn(SplFileInfo $file) => $file->isFile() && str_ends_with($file->getBasename(), 'Test.php'))
    |> p_foreach(static function (SplFileInfo $file) {
        $dir = substr(realpath($file->getPath()), strlen(realpath(__DIR__.'/../tst')));

        echo "Compiling Test $dir/{$file->getBasename()}\n";

        $content = file_get_contents($file->getPathname());
        if ($file->getBasename() !== 'pipe_Test.php') {
            $content = explode("\n", $content)
                |> p_filter_out(fn($line) => 'use function ImpartialPipes\pipe;' === $line)
                |> p_map(function (string $line) {
                    if ('<?php' === $line) return $line . ' // This file is autogenerated';
                    if (str_contains($line, ' pipe(') && str_ends_with($line, ')')) $line = str_replace(' pipe(', ' ', substr($line, 0, -1));
                    if (str_contains($line, ')->to(') && str_ends_with($line, ')')) $line = str_replace(')->to(', ' |> ', substr($line, 0, -1));
                    if (str_contains($line, ')->to(') && str_ends_with($line, ');')) $line = str_replace(')->to(', ' |> ', substr($line, 0, -2)) . ';';
                    if (str_contains($line, ' ->to(') && str_ends_with($line, ')')) $line = str_replace(' ->to(', ' |> ', substr($line, 0, -1));
                    if (str_contains($line, ' ->to(') && str_ends_with($line, ');')) $line = str_replace(' ->to(', ' |> ', substr($line, 0, -2)) . ';';
                    return str_replace('pipe(', '', $line);
                })
                |> p_implode("\n");
        }

        @mkdir(__DIR__.'/../tst85/'.$dir, recursive: true);
        file_put_contents(__DIR__."/../tst85/$dir/{$file->getBasename()}85", $content);
    });